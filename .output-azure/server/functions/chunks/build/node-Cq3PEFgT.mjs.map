{"version":3,"file":"node-Cq3PEFgT.mjs","sources":["../../../../../node_modules/@nuxtjs/mdc/dist/runtime/utils/node.js"],"sourcesContent":["export const TEXT_TAGS = [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"li\"];\nexport function isTag(vnode, tag) {\n  if (vnode.type === tag) {\n    return true;\n  }\n  if (typeof vnode.type === \"object\" && vnode.type.tag === tag) {\n    return true;\n  }\n  if (vnode.tag === tag) {\n    return true;\n  }\n  return false;\n}\nexport function isText(vnode) {\n  return isTag(vnode, \"text\") || isTag(vnode, Symbol.for(\"v-txt\"));\n}\nexport function nodeChildren(node) {\n  if (Array.isArray(node.children) || typeof node.children === \"string\") {\n    return node.children;\n  }\n  if (typeof node.children?.default === \"function\") {\n    return node.children.default();\n  }\n  return [];\n}\nexport function nodeTextContent(node) {\n  if (!node) {\n    return \"\";\n  }\n  if (Array.isArray(node)) {\n    return node.map(nodeTextContent).join(\"\");\n  }\n  if (isText(node)) {\n    return node.children || node.value || \"\";\n  }\n  const children = nodeChildren(node);\n  if (Array.isArray(children)) {\n    return children.map(nodeTextContent).filter(Boolean).join(\"\");\n  }\n  return \"\";\n}\nexport function unwrap(vnode, tags = []) {\n  if (Array.isArray(vnode)) {\n    return vnode.flatMap((node) => unwrap(node, tags));\n  }\n  let result = vnode;\n  if (tags.some((tag) => tag === \"*\" || isTag(vnode, tag))) {\n    result = nodeChildren(vnode) || vnode;\n    if (!Array.isArray(result) && TEXT_TAGS.some((tag) => isTag(vnode, tag))) {\n      result = [result];\n    }\n  }\n  return result;\n}\nfunction _flatUnwrap(vnodes, tags = []) {\n  vnodes = Array.isArray(vnodes) ? vnodes : [vnodes];\n  if (!tags.length) {\n    return vnodes;\n  }\n  return vnodes.flatMap((vnode) => _flatUnwrap(unwrap(vnode, [tags[0]]), tags.slice(1))).filter((vnode) => !(isText(vnode) && nodeTextContent(vnode).trim() === \"\"));\n}\nexport function flatUnwrap(vnodes, tags = []) {\n  if (typeof tags === \"string\") {\n    tags = tags.split(/[,\\s]/).map((tag) => tag.trim()).filter(Boolean);\n  }\n  if (!tags.length) {\n    return vnodes;\n  }\n  return _flatUnwrap(vnodes, tags).reduce((acc, item) => {\n    if (isText(item)) {\n      if (typeof acc[acc.length - 1] === \"string\") {\n        acc[acc.length - 1] += item.children;\n      } else {\n        acc.push(item.children);\n      }\n    } else {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n}\n"],"names":[],"mappings":"","x_google_ignoreList":[0]}