{"version":3,"file":"path-meta.mjs","sources":["../../../../../node_modules/@nuxt/content/dist/runtime/transformers/utils.js","../../../../../node_modules/@nuxt/content/dist/runtime/transformers/path-meta.js"],"sourcesContent":["export const defineTransformer = (transformer) => {\n  return transformer;\n};\nexport const createSingleton = (fn) => {\n  let instance;\n  return (...args) => {\n    if (!instance) {\n      instance = fn(...args);\n    }\n    return instance;\n  };\n};\n","import { pascalCase } from \"scule\";\nimport slugify from \"slugify\";\nimport { withoutTrailingSlash, withLeadingSlash } from \"ufo\";\nimport { defineTransformer } from \"./utils.js\";\nconst SEMVER_REGEX = /^(\\d+)(\\.\\d+)*(\\.x)?$/;\nexport const describeId = (id) => {\n  const [_source, ...parts] = id.split(\":\");\n  const [, basename, _extension] = parts[parts.length - 1]?.match(/(.*)\\.([^.]+)$/) || [];\n  if (basename) {\n    parts[parts.length - 1] = basename;\n  }\n  const _path = (parts || []).join(\"/\");\n  return {\n    _source,\n    _path,\n    _extension,\n    _file: _extension ? `${_path}.${_extension}` : _path,\n    _basename: basename || \"\"\n  };\n};\nexport default defineTransformer({\n  name: \"path-meta\",\n  extensions: [\".*\"],\n  transform(content, options = {}) {\n    const { locales = [], defaultLocale = \"en\", respectPathCase = false } = options;\n    const { _source, _file, _path, _extension, _basename } = describeId(content._id);\n    const parts = _path.split(\"/\");\n    const _locale = locales.includes(parts[0]) ? parts.shift() : defaultLocale;\n    const filePath = generatePath(parts.join(\"/\"), { respectPathCase });\n    return {\n      _path: filePath,\n      _dir: filePath.split(\"/\").slice(-2)[0],\n      _draft: content._draft || content.draft || isDraft(_path),\n      _partial: isPartial(_path),\n      _locale,\n      ...content,\n      // TODO: move title to Markdown parser\n      title: content.title || generateTitle(refineUrlPart(_basename)),\n      _source,\n      _file,\n      _stem: _path,\n      _extension\n    };\n  }\n});\nconst isDraft = (path) => !!path.match(/\\.draft(\\/|\\.|$)/);\nconst isPartial = (path) => path.split(/[:/]/).some((part) => part.match(/^_.*/));\nexport const generatePath = (path, { forceLeadingSlash = true, respectPathCase = false } = {}) => {\n  path = path.split(\"/\").map((part) => slugify(refineUrlPart(part), { lower: !respectPathCase })).join(\"/\");\n  return forceLeadingSlash ? withLeadingSlash(withoutTrailingSlash(path)) : path;\n};\nexport const generateTitle = (path) => path.split(/[\\s-]/g).map(pascalCase).join(\" \");\nexport function refineUrlPart(name) {\n  name = name.split(/[/:]/).pop();\n  if (SEMVER_REGEX.test(name)) {\n    return name;\n  }\n  return name.replace(/(\\d+\\.)?(.*)/, \"$2\").replace(/^index(\\.draft)?$/, \"\").replace(/\\.draft$/, \"\");\n}\n"],"names":[],"mappings":"","x_google_ignoreList":[0,1]}