{"version":3,"file":"query.mjs","sources":["../../../../../node_modules/@nuxt/content/dist/runtime/utils/json.js","../../../../../node_modules/@nuxt/content/dist/runtime/utils/query.js"],"sourcesContent":["export function jsonStringify(value) {\n  return JSON.stringify(value, regExpReplacer);\n}\nexport function jsonParse(value) {\n  return JSON.parse(value, regExpReviver);\n}\nfunction regExpReplacer(_key, value) {\n  if (value instanceof RegExp) {\n    return `--REGEX ${value.toString()}`;\n  }\n  return value;\n}\nfunction regExpReviver(_key, value) {\n  const withOperator = typeof value === \"string\" && value.match(/^--([A-Z]+) (.+)$/) || [];\n  if (withOperator[1] === \"REGEX\") {\n    const regex = withOperator[2]?.match(/\\/(.*)\\/([dgimsuy]*)$/);\n    return regex?.[1] ? new RegExp(regex[1], regex[2] || \"\") : value;\n  }\n  return value;\n}\n","import { getQuery, createError } from \"h3\";\nimport { jsonParse, jsonStringify } from \"./json.js\";\nconst parseJSONQueryParams = (body) => {\n  try {\n    return jsonParse(body);\n  } catch {\n    throw createError({ statusCode: 400, message: \"Invalid _params query\" });\n  }\n};\nexport const encodeQueryParams = (params) => {\n  let encoded = jsonStringify(params);\n  encoded = typeof Buffer !== \"undefined\" ? Buffer.from(encoded).toString(\"base64\") : btoa(encoded);\n  encoded = encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  const chunks = encoded.match(/.{1,100}/g) || [];\n  return chunks.join(\"/\");\n};\nexport const decodeQueryParams = (encoded) => {\n  encoded = encoded.replace(/\\//g, \"\");\n  encoded = encoded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  encoded = encoded.padEnd(encoded.length + (4 - encoded.length % 4) % 4, \"=\");\n  return parseJSONQueryParams(typeof Buffer !== \"undefined\" ? Buffer.from(encoded, \"base64\").toString() : atob(encoded));\n};\nconst memory = {};\nexport const getContentQuery = (event) => {\n  const { params } = event.context.params || {};\n  if (params) {\n    return decodeQueryParams(params.replace(/.json$/, \"\"));\n  }\n  const qid = event.context.params?.qid?.replace(/.json$/, \"\");\n  const query = getQuery(event) || {};\n  if (qid && query._params) {\n    memory[qid] = parseJSONQueryParams(decodeURIComponent(query._params));\n    if (memory[qid]?.where && !Array.isArray(memory[qid]?.where)) {\n      memory[qid].where = [memory[qid].where];\n    }\n    return memory[qid];\n  }\n  if (qid && memory[qid]) {\n    return memory[qid];\n  }\n  if (query._params) {\n    return parseJSONQueryParams(decodeURIComponent(query._params));\n  }\n  if (typeof query.only === \"string\" && query.only.includes(\",\")) {\n    query.only = query.only.split(\",\").map((s) => s.trim());\n  }\n  if (typeof query.without === \"string\" && query.without.includes(\",\")) {\n    query.without = query.without.split(\",\").map((s) => s.trim());\n  }\n  const where = query.where || {};\n  for (const key of [\"draft\", \"partial\", \"empty\"]) {\n    if (query[key] && [\"true\", \"false\"].includes(query[key])) {\n      where[key] = query[key] === \"true\";\n      delete query[key];\n    }\n  }\n  if (query.sort) {\n    query.sort = String(query.sort).split(\",\").map((s) => {\n      const [key, order] = s.split(\":\");\n      return [key, Number.parseInt(order || \"0\", 10)];\n    });\n  }\n  const reservedKeys = [\"partial\", \"draft\", \"only\", \"without\", \"where\", \"sort\", \"limit\", \"skip\"];\n  for (const key of Object.keys(query)) {\n    if (reservedKeys.includes(key)) {\n      continue;\n    }\n    query.where = query.where || {};\n    query.where[key] = query[key];\n  }\n  if (Object.keys(where).length > 0) {\n    query.where = [where];\n  } else {\n    delete query.where;\n  }\n  return query;\n};\n"],"names":[],"mappings":"","x_google_ignoreList":[0,1]}